@using TwoStu.Logic.Models.TaskSolutions
@model SearchSolutionsModel
@{
    ViewBag.Title = "SearchAnyTask";



    int? subjectIdParam =  ViewBag.SubjectIdParam as int?;
    int? workTypeIdParam = ViewBag.WorkTypeIdParam as int?;
    int? subjectSectionIdParam = ViewBag.SubjectSectionIdParam as int?;
    bool? needSearchParam = ViewBag.NeedSearchParam as bool?;

    //для джаваскрипта
    int subjectId = subjectIdParam.HasValue ? subjectIdParam.Value : -1;
    int workTypeId = workTypeIdParam.HasValue ? workTypeIdParam.Value : -1;
    int subjectSectionId = subjectSectionIdParam.HasValue ? subjectSectionIdParam.Value : -1;
    bool needSearch = needSearchParam.HasValue ? needSearchParam.Value : false;

}

<h2>Поиск любого задания по уточнениям по предмету <strong><span id="subjectNameSpan"></span></strong></h2>



@using (Html.BeginForm("TasksSearch", "Home", FormMethod.Post, htmlAttributes: new { id = "myForm", enctype = "multipart/form-data", @class = "form-horizontal" }))
{
    <div class="form-group">
        @Html.Label("Предмет", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("SubjectId", null,
                                    htmlAttributes: new
                                    {
                                        @class = "form-control",
                                        id = "SubjectIdList"
                                    })
        </div>
    </div>



    <div class="form-group">
        @Html.Label("Раздел предмета", htmlAttributes: new { @class = "control-label col-md-2" })
        <div id="placeForSubjectSectionsList" class="col-md-10">

        </div>
    </div>





    <div id="testPlace">

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WorkTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("WorkTypeId", null, htmlAttributes: new { @class = "form-control", id = "WorkTypeIdList" })
            @Html.ValidationMessageFor(model => model.WorkTypeId, "", new { @class = "text-danger" })
        </div>
    </div>

    @Html.HiddenFor(x => x.DivisionChildsString, htmlAttributes: new { id = "DivisionChildsString" })

    

    <div class="form-group">
        @Html.LabelFor(model => model.TaskDesc, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.TaskDesc, new { id = "taskDesc", htmlAttributes = new { @class = "form-control", rows = 20 } })
            @Html.ValidationMessageFor(model => model.TaskDesc, "", new { @class = "text-danger" })
        </div>
    </div>

    <input id="hiddenSubmit" type="submit" class="hidden" value="Настоящий Поиск" />

    <div id="fakeBtn" class="btn btn-success" onclick="fakeSearchClicked()">
        Найти
    </div>
}



<hr />

<div>
    <strong>
        @Html.ActionLink("[Поиск задания только по описанию]", "SearchTask", "Home") |
        @Html.ActionLink("[К списку решений]", "Index", "TaskSolutions") |
        @Html.ActionLink("[К списку предметов]", "Index", "Subjects")
    </strong>
</div>

<hr/>


<div id="searchResult">

</div>


@section scripts{

    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
    

    <script>
        
    </script>

    <!--Creating Drops-->
    <script>
        function GetDropList(data) {
            var selectList = document.createElement("select");
            selectList.className = "form-control";


            var nullOption = document.createElement("option");
            nullOption.value = 0;
            nullOption.text = "Не выбрано";
            selectList.appendChild(nullOption);

            //Create and append the options
            for (var i = 0; i < data.length; i++) {
                var option = document.createElement("option");
                option.value = data[i].Id;
                option.text = data[i].Name;
                selectList.appendChild(option);
            }

            return selectList;
        }

        function GetDropList(data, addedClassName) {
            var selectList = document.createElement("select");
            selectList.className = "form-control " + addedClassName;

            var nullOption = document.createElement("option");
            nullOption.value = 0;
            nullOption.text = "Не выбрано";
            selectList.appendChild(nullOption);

            //Create and append the options
            for (var i = 0; i < data.length; i++) {
                var option = document.createElement("option");
                option.value = data[i].Id;
                option.text = data[i].Name;
                selectList.appendChild(option);
            }

            return selectList;
        }


        function MakeDropListBase(data, placeId, toBuildSelectListId) {
            var myDiv = document.getElementById(placeId);

            myDiv.innerHTML = "";
            //Create and append select list
            var selectList = GetDropList(data);
            selectList.id = toBuildSelectListId;

            myDiv.appendChild(selectList);


        }

        function MakeSubjectSectionDropList(data) {

            console.log("Начинаем строить!");
            console.log(data);

            var myDiv = document.getElementById("placeForSubjectSectionsList");

            myDiv.innerHTML = "";
            //Create and append select list
            var selectList = document.createElement("select");
            selectList.id = "SubjectSectionsList";
            selectList.className = "form-control";
            selectList.name = "SubjectSectionId";
            myDiv.appendChild(selectList);

            var notChosenOption = document.createElement("option");
            notChosenOption.value = -1;
            notChosenOption.text = "Не выбрано";
            notChosenOption.selected = true;
            selectList.appendChild(notChosenOption);

            //Create and append the options
            for (var i = 0; i < data.length; i++) {
                var option = document.createElement("option");
                option.value = data[i].Id;
                if (subjectSectionId != null && parseInt(subjectSectionId) > 0 && option.value == parseInt(subjectSectionId))
                {
                    subjectSectionId = null;
                    option.selected = true;
                }
                option.text = data[i].Name;
                selectList.appendChild(option);
            }

            


        }

        function MakeSubjectSectionDropListForAutoSearch(subjectSectionId) {

            

            var myDiv = document.getElementById("placeForSubjectSectionsList");

            myDiv.innerHTML = "";
            //Create and append select list
            var selectList = document.createElement("select");
            selectList.id = "SubjectSectionsList";
            selectList.className = "form-control";
            selectList.name = "SubjectSectionId";
            myDiv.appendChild(selectList);

            var notChosenOption = document.createElement("option");
            notChosenOption.value = -1;
            notChosenOption.text = "Не выбрано";
            selectList.appendChild(notChosenOption);

            
            var option = document.createElement("option");
            option.value = subjectSectionId;
            option.text = "Из запроса";
            option.selected = true;
            selectList.appendChild(option);
            
        }
    </script>

    <!--Функции создающие выпадающие списки-->
    <script>
        function MakeSubjectDivisionsDropList(data) {

            var placeId = "placeForSubjectDivisionsList";
            var toBuildSelectList = "SubjectDivisionsList";
            MakeDropListBase(data, placeId, toBuildSelectList);
        }

        function MakeSubjectDivisionChildsDropList(data) {
            var placeId = "placeForSubjectDivisionChildsList";
            var toBuildSelectList = "SubjectDivisionChildsList";
            MakeDropListBase(data, placeId, toBuildSelectList);
        }

    </script>
    <!--/Функции создающие выпадающие списки-->

    <!--Следилки за измененияи в списке предметов-->
    <script>
        var subjectNameSpan = document.getElementById("subjectNameSpan");

        
        var subjectIdList = $("#SubjectIdList");

        subjectIdList.change(function (e) {
            
            e.preventDefault();

            SubjectListChangeHandler()
        })

        function SubjectListChangeHandler()
        {
            var subjectId = document.getElementById("SubjectIdList").value;

            //получаем предмет выбранный в списке
            var e = document.getElementById("SubjectIdList");
            var subjectName = e.options[e.selectedIndex].text;
            subjectNameSpan.innerHTML = subjectName;


            $.ajax({
                type: "GET",
                url: '/Default/GetSubjectSections?subjectId=' + subjectId,
                success: function (response) {

                    SubjectSections = response;
                    //так как предмет поменялся значит место для уточнений нужно убрать
                    document.getElementById("testPlace").innerHTML = "";

                    MakeSubjectSectionDropList(response);
                }
            });
        }

        SubjectListChangeHandler();
    </script>
    <!--/Следилки за измененияи в списке предметов-->

    <!--Следилки за изменениями в списке разделов предметов-->
    <script>
        var SubjectSectionsList = $("#SubjectSectionsList");
        //здесь нужно построить кучу выпадающих списков
        $(document).on("change", "#SubjectSectionsList", function (e) {

            //очищаем место
            var myDiv = document.getElementById("testPlace");
            myDiv.innerHTML = "";

            var subjectSectionId = $(this).val();

            console.log("Change in sections id=" + subjectSectionId)

            $.ajax({
                type: "GET",
                url: '/Default/GetSubjectDivisions?subjectSectionId=' + subjectSectionId,
                success: function (response) {

                    //SubjectSections = response;
                    //MakeSubjectDivisionsDropList(response);
                    BuildDropsForSubjectSection(response);
                }
            });
        })

    </script>
    <!--/Следилки за изменениями в списке разделов предметов-->

    <!--Функции которые строят выпадающие списки по каждому из разделов-->
    <script>
        function BuildDropsForSubjectSection(data) {
            for (i = 0; i < data.length; i++) {
                AJAXMakeDropList(data[i]);
            }
        }

        //функция принимает селект и создает для него разметку
        //также принимается имя для лейбла
        function BuildOneDropFromList(selectList, labelName) {
            var mainDiv = document.createElement("div");
            mainDiv.className = "form-group subjectDivisionDrop";

            var label = document.createElement("label");
            label.className = "control-label col-md-2";
            label.innerHTML = labelName;

            mainDiv.appendChild(label);

            var divForDrop = document.createElement("div");
            divForDrop.className = "col-md-10";

            divForDrop.appendChild(selectList);

            mainDiv.appendChild(divForDrop);

            //получаем элемент в котором хотим разместить на лист
            var toPlaceDiv = document.getElementById("testPlace");
            toPlaceDiv.appendChild(mainDiv);
        }


        //функция аяксом получает данные для построения
        //выпадающего списка с вариантом уточнения по разделу предмета
        function AJAXMakeDropList(dataBit) {
            var labelName = dataBit.Name;
            //аякс для получения вариантов уточнения по
            //одному уточнению которое пришло параметром в функцию
            $.ajax({
                type: "GET",
                url: '/Default/GetSubjectDivisionChilds?subjectDivisionId=' + dataBit.Id,
                success: function (response) {
                    var selectList = GetDropList(response, "selectDivision");
                    BuildOneDropFromList(selectList, labelName);
                }
            });
        }


    </script>
    <!--/Функции которые строят выпадающие списки по каждому из разделов-->

    <!--Получение строки с уточнениями-->
    <script>
        function GetDivisionsChildString() {
            var selects = document.getElementsByClassName("selectDivision");

            var divisionsString = "";
            for (i = 0; i < selects.length; i++) {
                divisionsString += selects[i].value + ","
            }

            return divisionsString;
        }
    </script>
    <!--/Получение строки с уточнениями-->
    
    <!--Обработчики клика-->
    <script>
        function fakeSearchClicked() {
            console.log("клик на Поиск");

            var divisionsString = GetDivisionsChildString();
            console.log(divisionsString);

            var DivisionChildsString = document.getElementById("DivisionChildsString");
            DivisionChildsString.value = divisionsString;

            console.log($("#DivisionChildsString").val())

            if (CheckForm()) {

                MakeLoading("searchResult");
                SendToServer();
            }

        }

        function MakeLoading(elementId)
        {
            var sp = document.createElement("span");
            sp.className = "fa fa-spinner fa-5x fa-spin";

            var searchResult = document.getElementById(elementId);
            searchResult.innerHTML = "";

            searchResult.appendChild(sp);

        }

        function CheckForm() {
            var count = 0;

            
            CheckTextInput() ? count = count + 1 : count = count;

            return count == 1;
        }

        function SendToServer() {
            
            var searchData =
                {
                    SubjectId: document.getElementById("SubjectIdList").value,
                    SubjectSectionId: (document.getElementById("SubjectSectionsList") != null) ?
                        document.getElementById("SubjectSectionsList").value : 0,
                    WorkTypeId: document.getElementById("WorkTypeIdList").value,
                    DivisionChildsString: document.getElementById("DivisionChildsString").value,
                    TaskDesc: document.getElementById("taskDesc").value,
                };

            SearchAndUpdateDivGet(searchData);
        }
    </script>
    <!--/Обработчики клика-->

    <!--Функции посылающие посиковый запрос-->
    <script>
        

        function SearchAndUpdateDivGet(searchData)
        {
            
            var paramsString = "?SubjectId=" + encodeURIComponent(searchData.SubjectId)
                + "&SubjectSectionId=" + encodeURIComponent(searchData.SubjectSectionId)
                + "&DivisionChildsString=" + encodeURIComponent(searchData.DivisionChildsString)
                + "&WorkTypeId=" + encodeURIComponent(searchData.WorkTypeId)
                + "&TaskDesc=" + encodeURIComponent(searchData.TaskDesc);

            $('#searchResult').load('/Home/TasksSearch2' + paramsString);
        }
    </script>
    <!--/Функции посылающие посиковый запрос-->


    <!--Обработчики формы-->
    <script>
        function CheckTextInput() {
            return true;
        }
    </script>
    <!--/Обработчики формы-->

    <!--Установщики значений поиска из параметров ссылки-->
    <script>
        var subjectId = @subjectId;
        var workTypeId = @workTypeId;
        var subjectSectionId = @subjectSectionId;
        var needSearch = @needSearch.ToString().ToLower();

        if (parseInt(subjectId) > 0)
        {
            console.log("subjectId", subjectId);
            document.getElementById("SubjectIdList").value = subjectId;
        }

        
        if (parseInt(subjectSectionId) > 0)
        {
            MakeSubjectSectionDropListForAutoSearch(subjectSectionId)
            document.getElementById("SubjectSectionsList").value = subjectSectionId;
        }

        if (needSearch)
        {
            SendToServer();
        }
    </script>
    <!--/Установщики значений поиска из параметров ссылки-->

}
